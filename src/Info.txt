一、词法分析
    1、目前为止，词法分析的内容确实都快忘了！！这里的想法是先将输入的语句分隔开处理为二元式的格式
    2、
    int a;
    int b;
    int c;
    a = 2;
    b = 1;              //多位数赋值?
    if ( a > b )
    c = a + b;
    else
    c = a - b;
    不妨对以上语句进行分析发现，倘若使用RE对原始字符串进行分割可能会好一些
    3、思路是
        (1)首先将从文件中读取到的字符串以空格为标识符进行分割 -> 预处理阶段
        (2)接下来对得到的每一个字符串转换为byte[]进行处理
        (3)创造一个Word类来存储输入的字符，定义一些属性与变量
        (4)不妨使用LinkedList作为存储工具，将得到的所有字符按照一定的顺序构建出对应的链表(循环链表较为合适!)

    附：一些思考
    ① 由于引入正则匹配的形式，这也就意味着可以直接对一些类型定义(关键字)进行匹配
    ② 需要考虑的一些问题
        [1] 多位数为变量赋值的问题                             √
        [2] 变量的多位数定义问题                               √
        [3] 关于使用链表存储的问题，发现下标Index不存在也可以!
        [4] 注意！关键字中出现了float，这也就意味着可以定义小数，因此需要对'.'进行处理!
        [5] 这里不妨强制要求运算符左右都留有空格！ (dog^)
        [6] 未定义变量就直接使用的问题 -> 这里必须先定义变量才行，否则多字符变量会被拆解为单字符变量!
                                  ->  定义之后就可以通过查表的形式进行辨别
                                  -> 即在regWord中添加在符号表(想法是以HashMap形式实现)中查询
    4、分析语句中出现的各种符号的类型

    5、接下来对符号表进行构建
        -> 符号表中存储有变量(标识符)和常量(数字常数和字符常数)
            -> 这里需要做的就是将标识符实例化出来(想法是构建一个类),存放入HashMap中作为符号表
        -> 针对于这个类的构建: ① 需要有int、float私有属性，这里建议使用包装类实现         -> 再加上一个Word类作为私有属性(存储类型及种别等)
                            ② 若扫描到为关键字，则进入符号表的构建状态，创建类加入符号表中
                            ③ 针对于这些变量的定义，基本上为keyWord + letter + ; 组成
                            ④ 扫描词法分析初步形成的序列即可摘出这些定义