以下为此程序的说明文档

一些全局文件
Info.txt:    整个实验过程之中的一些思考与总结
Test01.java: 实验过程之中的一些测试单元
Hello.txt:   输入测试使用的文件
code.txt:    为该系统提供的一些测试集 -> 可以取一个测试集拷贝到Input.txt文件内，并执行ComTest.java中的main函数即可

运行环境:Windows10 + Intellij IDEA



1、词法分析阶段
   (1) 类: Word            -> 存储Token序列单元的类
           LexicalAnalyzer -> 词法分析主控类(实现词法分析)
           TableNode       -> 符号表的基本组成单元类
       文件: input.txt      -> 存储输入的内容
             TableInfo.txt -> Token序列及符号表中的内容
   (2) 词法分析获取输入有两种方式，一种是文件读取，另一种是在运行时输入。第一种情况就是读取Input.txt中的内容进行获取，
       第二种为在Test01的第20个测试单元(test20)运行的时候，会记录输入的数据到Input.txt之中，供给词法分析程序
   (3) 在运行完毕一次程序之后，TableInfo.txt中存储的即为词法分析获取到的Token序列内容即符号表中的内容

2、语法分析及语义处理阶段
   (1) 类: State                 -> 状态类 [对应规范项集族中的一个状态]
           Symbol                -> 符号类 [无论是语法符号还是终结符号都可以生成此类对象，该对象存储有语义信息]
           ParseGrammar          -> 文法分析类 [对相应的文法进行分析，并计算first集、follow集和Action-Goto表]
           AnalysisInput         -> 输入分析类 [进行语法分析及语义处理]
       文件: grammar.txt          -> 存储文法的文件
            ActionGotoTable.txt  -> 存储Action-Goto表的文件
            FirstCollection.txt  -> 存储语法变量first集的文件
            FollowCollection.txt -> 存储语法变量first集的文件
   (2) 程序运行结束之后，会将结果显示在控制台上，会将词法分析读入的内容、语法分析结果、语义处理生成的三地址代码序列
       及符号表的内容展示出来。

   (3) 针对于状态转换图的详细查看      ※※※
        -> 这里在ParseGrammar类中最顶端有一个内部测试模块，在Debug模式下运行即可到达断点处
        -> 此时在下方控制栏Variables项目中可以查看当前变量的内容
        -> 找到生成的状态转换图，即为actGoToTable
        -> 其中的每一项key.name值为对应的状态编号
        -> key.str为对应的项集闭包
        -> value.key值表示对应的规约状态/输入的符号
            -> 若为可规约的状态，key值即为一个产生式，value记录的即为规约之后对应的状态
            -> 若为可能输入的终结符号，则value记录着输入该符号之后转换到的另一个状态
        -> 以上，即可查看每一种状态的转换。

3、错误处理
    若程序运行发生错误，程序会将错误原因打印出来，并提示在何处出现了问题。


